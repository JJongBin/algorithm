function solution(n, edge) {
  var answer = 0;

  const graph = {};

  for (const e of edge) {
    const [start, end] = e;
    if (graph[start]) graph[start].push(end);
    else graph[start] = [end];
    if (graph[end]) graph[end].push(start);
    else graph[end] = [start];
  }

  const queue = [1];
  const distArr = new Array(n + 1).fill(0);
  const check = new Array(n + 1).fill(0);
  let dist = 1;
  let maxDist = 1;

  check[1] = 1;

  while (queue.length) {
    const len = queue.length;
    for (let i = 0; i < len; i++) {
      const node = queue.shift();
      if (!graph[node]) continue;

      for (const nextNode of graph[node]) {
        if (check[nextNode]) continue;
        distArr[nextNode] = dist;
        maxDist = maxDist < dist ? dist : maxDist;
        check[nextNode] = 1;
        queue.push(nextNode);
      }
    }
    dist++;
  }

  for (const dist of distArr) {
    if (dist === maxDist) answer += 1;
  }

  return answer;
}

console.log(
  solution(6, [
    [3, 6],
    [4, 3],
    [3, 2],
    [1, 3],
    [1, 2],
    [2, 4],
    [5, 2],
  ])
);
